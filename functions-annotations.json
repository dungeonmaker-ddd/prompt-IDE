{
  "functions": [
    {
      "name": "updateDebugPanel",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 523,
        "endLine": 580
      },
      "description": "@function updateDebugPanel\r\n@description 更新调试面板的内容，显示原始数据结构",
      "internalComments": [
        {
          "comment": "// 转换 Map 和 Set 为对象和数组以便更好地展示\n// openedDirectories Map",
          "code": "const openedDirsObj = {};",
          "location": {
            "commentLine": 528,
            "codeLine": 530
          }
        },
        {
          "comment": "// directoryRelationships Map",
          "code": "const relationshipsObj = {};",
          "location": {
            "commentLine": 541,
            "codeLine": 542
          }
        },
        {
          "comment": "// rootDirectories Set",
          "code": "rootDirectoriesDebug.textContent = JSON.stringify([...rootDirectories], null, 2);",
          "location": {
            "commentLine": 549,
            "codeLine": 550
          }
        },
        {
          "comment": "// selectedItemsPerCard Map",
          "code": "const selectedItemsObj = {};",
          "location": {
            "commentLine": 553,
            "codeLine": 554
          }
        },
        {
          "comment": "// dirHandleMap",
          "code": "const dirHandleObj = {};",
          "location": {
            "commentLine": 565,
            "codeLine": 566
          }
        },
        {
          "comment": "// 全局变量",
          "code": "const globalVars = {",
          "location": {
            "commentLine": 573,
            "codeLine": 574
          }
        }
      ]
    },
    {
      "name": "getExistingCardId",
      "type": "函数声明",
      "params": "dirHandle",
      "location": {
        "startLine": 582,
        "endLine": 585
      },
      "description": "@function isDirectoryAlreadyOpen\r\n@description 检查目录是否已经打开\r\n@param {FileSystemDirectoryHandle} dirHandle 目录句柄\r\n@returns {boolean} 目录是否已经打开\r\n/\r\n    async function isDirectoryAlreadyOpen(dirHandle) {\r\n      // 尝试获取唯一标识符\r\n      try {\r\n        // 使用目录名称作为简单的标识符\r\n        // 在实际应用中可能需要更复杂的逻辑来确定唯一性\r\n        const path = dirHandle.name;\r\n        return dirHandleMap.has(path);\r\n      } catch (error) {\r\n        console.error('检查目录是否已打开时出错', error);\r\n        return false;\r\n      }\r\n    }\r\n    /**\r\n@function getExistingCardId\r\n@description 获取已打开目录的卡片ID\r\n@param {FileSystemDirectoryHandle} dirHandle 目录句柄\r\n@returns {string|null} 卡片ID，如果未打开则返回null"
    },
    {
      "name": "isDirectoryAlreadyOpen",
      "type": "函数声明",
      "params": "dirHandle",
      "location": {
        "startLine": 588,
        "endLine": 599
      },
      "internalComments": [
        {
          "comment": "// 尝试获取唯一标识符",
          "code": "try {",
          "location": {
            "commentLine": 589,
            "codeLine": 590
          }
        },
        {
          "comment": "// 使用目录名称作为简单的标识符\n// 在实际应用中可能需要更复杂的逻辑来确定唯一性",
          "code": "const path = dirHandle.name;",
          "location": {
            "commentLine": 591,
            "codeLine": 593
          }
        }
      ]
    },
    {
      "name": "createRootContainer",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 612,
        "endLine": 615
      },
      "description": "@function createRootContainer\r\n@description 创建根目录容器\r\n@returns {string} 容器ID"
    },
    {
      "name": "createDirectoryCard",
      "type": "函数声明",
      "params": "directoryName, dirHandle, parentCardId = null, containerID = null",
      "location": {
        "startLine": 629,
        "endLine": 632
      },
      "description": "@function createDirectoryCard\r\n@description 创建目录卡片\r\n@param {string} directoryName 目录名称\r\n@param {FileSystemDirectoryHandle} dirHandle 目录句柄\r\n@param {string|null} parentCardId 父卡片ID\r\n@param {string|null} containerID 容器ID\r\n@returns {HTMLElement} 创建的卡片元素"
    },
    {
      "name": "findRootContainer",
      "type": "函数声明",
      "params": "cardId",
      "location": {
        "startLine": 786,
        "endLine": 789
      },
      "description": "@function findRootContainer\r\n@description 查找卡片所属的根容器\r\n@param {string} cardId 卡片ID\r\n@returns {string} 根容器ID"
    },
    {
      "name": "closeCard",
      "type": "函数声明",
      "params": "cardId",
      "location": {
        "startLine": 800,
        "endLine": 803
      },
      "description": "@function closeCard\r\n@description 关闭卡片及其所有子卡片\r\n@param {string} cardId 要关闭的卡片ID"
    },
    {
      "name": "clearAllCards",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 855,
        "endLine": 887
      },
      "description": "@function clearAllCards\r\n@description 清空所有卡片",
      "internalComments": [
        {
          "comment": "// 复制根目录ID集合，因为在循环中会修改集合",
          "code": "const rootIds = [...rootDirectories];",
          "location": {
            "commentLine": 860,
            "codeLine": 861
          }
        },
        {
          "comment": "// 关闭所有根目录卡片",
          "code": "rootIds.forEach(cardId => closeCard(cardId));",
          "location": {
            "commentLine": 863,
            "codeLine": 864
          }
        },
        {
          "comment": "// 重置状态",
          "code": "openedDirectories.clear();",
          "location": {
            "commentLine": 866,
            "codeLine": 867
          }
        },
        {
          "comment": "// 清空编辑器",
          "code": "fileContentEditor.value = '';",
          "location": {
            "commentLine": 873,
            "codeLine": 874
          }
        },
        {
          "comment": "// 移除编辑器标签",
          "code": "const existingLabel = document.querySelector('.editor-label');",
          "location": {
            "commentLine": 879,
            "codeLine": 880
          }
        },
        {
          "comment": "// 更新调试面板",
          "code": "updateDebugPanel();",
          "location": {
            "commentLine": 885,
            "codeLine": 886
          }
        }
      ]
    },
    {
      "name": "selectItem",
      "type": "函数声明",
      "params": "cardId, itemType, itemName",
      "location": {
        "startLine": 889,
        "endLine": 892
      },
      "description": "@function selectItem\r\n@description 选中项目并添加到右侧面板\r\n@param {string} cardId 卡片ID\r\n@param {string} itemType 项目类型 ('file' 或 'directory')\r\n@param {string} itemName 项目名称"
    },
    {
      "name": "removeSelectedItem",
      "type": "函数声明",
      "params": "cardId, itemId",
      "location": {
        "startLine": 921,
        "endLine": 924
      },
      "description": "@function removeSelectedItem\r\n@description 从选中项中移除\r\n@param {string} cardId 卡片ID\r\n@param {string} itemId 项目ID"
    },
    {
      "name": "updateSelectedItemsPanel",
      "type": "函数声明",
      "params": "cardId",
      "location": {
        "startLine": 942,
        "endLine": 945
      },
      "description": "@function updateSelectedItemsPanel\r\n@description 更新卡片右侧的已选中项面板\r\n@param {string} cardId 卡片ID"
    },
    {
      "name": "showStatusMessage",
      "type": "函数声明",
      "params": "message, isError = false",
      "location": {
        "startLine": 998,
        "endLine": 1001
      },
      "description": "@function fillCardWithDirectoryContents\r\n@description 填充卡片内容区域\r\n@param {HTMLElement} contentLeft 左侧内容元素\r\n@param {HTMLElement} cardInfo 卡片信息元素\r\n@param {FileSystemDirectoryHandle} dirHandle 目录句柄\r\n@param {string} cardId 卡片ID\r\n@async\r\n/\r\n    async function fillCardWithDirectoryContents(contentLeft, cardInfo, dirHandle, cardId) {\r\n      try {\r\n        // 清空卡片内容\r\n        contentLeft.innerHTML = '';\r\n        let fileCount = 0;\r\n        let dirCount = 0;\r\n        // 遍历目录内容\r\n        for await (const entry of dirHandle.values()) {\r\n          const entryElement = document.createElement('div');\r\n          if (entry.kind === 'directory') {\r\n            dirCount++;\r\n            entryElement.className = 'directory-item';\r\n            entryElement.innerHTML = `<span class=\"item-icon\">📁</span> ${entry.name}`;\r\n            // 添加点击事件（左键）\r\n            entryElement.addEventListener('click', () => handleDirectoryClick(entry, cardId));\r\n            // 添加右键事件\r\n            entryElement.addEventListener('contextmenu', (event) => {\r\n              event.preventDefault(); // 阻止默认右键菜单\r\n              selectItem(cardId, 'directory', entry.name);\r\n            });\r\n          } else {\r\n            fileCount++;\r\n            entryElement.className = 'file-item';\r\n            entryElement.innerHTML = `<span class=\"item-icon\">📄</span> ${entry.name}`;\r\n            // 添加点击事件（左键）\r\n            entryElement.addEventListener('click', () => handleFileReadAsText(entry));\r\n            // 添加右键事件\r\n            entryElement.addEventListener('contextmenu', (event) => {\r\n              event.preventDefault(); // 阻止默认右键菜单\r\n              selectItem(cardId, 'file', entry.name);\r\n            });\r\n          }\r\n          contentLeft.appendChild(entryElement);\r\n        }\r\n        // 更新卡片信息\r\n        cardInfo.textContent = `${dirCount} 个目录, ${fileCount} 个文件`;\r\n      } catch (error) {\r\n        contentLeft.innerHTML = `<div class=\"error\">加载失败: ${error.message}</div>`;\r\n        cardInfo.textContent = '加载失败';\r\n        console.error('[DEBUG] 目录内容加载失败', error);\r\n      }\r\n    }\r\n    /**\r\n@function handleDirectorySelectionAndDisplay\r\n@description 处理用户选择目录并展示其内容\r\n@async\r\n/\r\n    async function handleDirectorySelectionAndDisplay() {\r\n      try {\r\n        // 请求读写权限以支持编辑操作\r\n        const dirHandle = await window.showDirectoryPicker({\r\n          mode: 'readwrite' // 需要读写权限\r\n        });\r\n        // 检查目录是否已经打开\r\n        if (await isDirectoryAlreadyOpen(dirHandle)) {\r\n          const existingCardId = getExistingCardId(dirHandle);\r\n          if (existingCardId) {\r\n            const card = document.getElementById(existingCardId);\r\n            if (card) {\r\n              // 已打开目录，滚动到该卡片\r\n              card.scrollIntoView({ behavior: 'smooth' });\r\n              showStatusMessage(`目录 ${dirHandle.name} 已经打开`);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        // 创建新的根容器\r\n        const containerId = createRootContainer();\r\n        // 创建根目录卡片\r\n        const rootCard = createDirectoryCard(dirHandle.name, dirHandle, null, containerId);\r\n        // 显示状态消息\r\n        showStatusMessage(`成功添加目录: ${dirHandle.name}`);\r\n      } catch (error) {\r\n        console.error('[DEBUG] 目录选择失败', error);\r\n        showStatusMessage(`选择目录失败: ${error.message}`, true);\r\n      }\r\n    }\r\n    /**\r\n@function showStatusMessage\r\n@description 显示状态消息\r\n@param {string} message 消息内容\r\n@param {boolean} isError 是否为错误消息"
    },
    {
      "name": "fillCardWithDirectoryContents",
      "type": "函数声明",
      "params": "contentLeft, cardInfo, dirHandle, cardId",
      "location": {
        "startLine": 1007,
        "endLine": 1057
      },
      "internalComments": [
        {
          "comment": "// 清空卡片内容",
          "code": "contentLeft.innerHTML = '';",
          "location": {
            "commentLine": 1009,
            "codeLine": 1010
          }
        },
        {
          "comment": "// 遍历目录内容",
          "code": "for await (const entry of dirHandle.values()) {",
          "location": {
            "commentLine": 1015,
            "codeLine": 1016
          }
        },
        {
          "comment": "// 添加点击事件（左键）",
          "code": "entryElement.addEventListener('click', () => handleDirectoryClick(entry, cardId));",
          "location": {
            "commentLine": 1024,
            "codeLine": 1025
          }
        },
        {
          "comment": "// 添加右键事件",
          "code": "entryElement.addEventListener('contextmenu', (event) => {",
          "location": {
            "commentLine": 1027,
            "codeLine": 1028
          }
        },
        {
          "comment": "// 添加点击事件（左键）",
          "code": "entryElement.addEventListener('click', () => handleFileReadAsText(entry));",
          "location": {
            "commentLine": 1037,
            "codeLine": 1038
          }
        },
        {
          "comment": "// 添加右键事件",
          "code": "entryElement.addEventListener('contextmenu', (event) => {",
          "location": {
            "commentLine": 1040,
            "codeLine": 1041
          }
        },
        {
          "comment": "// 更新卡片信息",
          "code": "cardInfo.textContent = `${dirCount} 个目录, ${fileCount} 个文件`;",
          "location": {
            "commentLine": 1050,
            "codeLine": 1051
          }
        }
      ]
    },
    {
      "name": "handleDirectorySelectionAndDisplay",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 1064,
        "endLine": 1097
      },
      "internalComments": [
        {
          "comment": "// 请求读写权限以支持编辑操作",
          "code": "const dirHandle = await window.showDirectoryPicker({",
          "location": {
            "commentLine": 1066,
            "codeLine": 1067
          }
        },
        {
          "comment": "// 检查目录是否已经打开",
          "code": "if (await isDirectoryAlreadyOpen(dirHandle)) {",
          "location": {
            "commentLine": 1071,
            "codeLine": 1072
          }
        },
        {
          "comment": "// 已打开目录，滚动到该卡片",
          "code": "card.scrollIntoView({ behavior: 'smooth' });",
          "location": {
            "commentLine": 1077,
            "codeLine": 1078
          }
        },
        {
          "comment": "// 创建新的根容器",
          "code": "const containerId = createRootContainer();",
          "location": {
            "commentLine": 1085,
            "codeLine": 1086
          }
        },
        {
          "comment": "// 创建根目录卡片",
          "code": "const rootCard = createDirectoryCard(dirHandle.name, dirHandle, null, containerId);",
          "location": {
            "commentLine": 1088,
            "codeLine": 1089
          }
        },
        {
          "comment": "// 显示状态消息",
          "code": "showStatusMessage(`成功添加目录: ${dirHandle.name}`);",
          "location": {
            "commentLine": 1091,
            "codeLine": 1092
          }
        }
      ]
    },
    {
      "name": "createConnectorLines",
      "type": "函数声明",
      "params": "parentCard, childCard",
      "location": {
        "startLine": 1126,
        "endLine": 1129
      },
      "description": "@function createConnectorLines\r\n@description 创建连接父卡片和子卡片的连接线\r\n@param {HTMLElement} parentCard 父卡片元素\r\n@param {HTMLElement} childCard 子卡片元素"
    },
    {
      "name": "toggleCardCollapse",
      "type": "函数声明",
      "params": "card",
      "location": {
        "startLine": 1194,
        "endLine": 1197
      },
      "description": "@function handleDirectoryClick\r\n@description 处理目录点击，打开子目录\r\n@param {FileSystemDirectoryHandle} dirHandle 目录句柄\r\n@param {string} parentCardId 父卡片ID\r\n@async\r\n/\r\n    async function handleDirectoryClick(dirHandle, parentCardId) {\r\n      try {\r\n        // 检查目录是否已经打开\r\n        if (await isDirectoryAlreadyOpen(dirHandle)) {\r\n          const existingCardId = getExistingCardId(dirHandle);\r\n          if (existingCardId) {\r\n            const card = document.getElementById(existingCardId);\r\n            if (card) {\r\n              // 已打开目录，滚动到该卡片\r\n              card.scrollIntoView({ behavior: 'smooth' });\r\n              showStatusMessage(`目录 ${dirHandle.name} 已经打开`);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        // 获取父卡片和容器\r\n        const parentCard = document.getElementById(parentCardId);\r\n        if (!parentCard) {\r\n          throw new Error('找不到父卡片');\r\n        }\r\n        const containerID = findRootContainer(parentCardId);\r\n        // 创建新的目录卡片\r\n        const directoryCard = createDirectoryCard(dirHandle.name, dirHandle, parentCardId, containerID);\r\n        // 创建连接线\r\n        setTimeout(() => {\r\n          createConnectorLines(parentCard, directoryCard);\r\n        }, 10);\r\n        // 滚动到新卡片位置\r\n        directoryCard.scrollIntoView({ behavior: 'smooth' });\r\n      } catch (error) {\r\n        console.error('[DEBUG] 打开子目录失败', error);\r\n        showStatusMessage(`打开目录失败: ${error.message}`, true);\r\n      }\r\n    }\r\n    /**\r\n@function handleFileReadAsText\r\n@description 将文件作为文本读取并显示\r\n@param {FileSystemFileHandle} fileHandle 文件句柄\r\n@async\r\n/\r\n    async function handleFileReadAsText(fileHandle) {\r\n      try {\r\n        const file = await fileHandle.getFile();\r\n        const textContent = await file.text();\r\n        fileContentEditor.value = textContent;\r\n        fileContentEditor.disabled = false;\r\n        saveChangesButton.disabled = false;\r\n        currentFileHandle = fileHandle;\r\n        // 添加当前正在编辑的文件信息\r\n        const editorLabel = document.createElement('div');\r\n        editorLabel.textContent = `正在编辑: ${fileHandle.name}`;\r\n        // 如果已经有标签，则替换它\r\n        const existingLabel = document.querySelector('.editor-label');\r\n        if (existingLabel) {\r\n          existingLabel.remove();\r\n        }\r\n        editorLabel.className = 'editor-label';\r\n        document.querySelector('.editor-container').insertBefore(editorLabel, fileContentEditor);\r\n        // 滚动到编辑器位置\r\n        fileContentEditor.scrollIntoView({ behavior: 'smooth' });\r\n        // 显示状态消息\r\n        showStatusMessage(`已加载文件: ${fileHandle.name}`);\r\n        // 更新调试面板\r\n        updateDebugPanel();\r\n      } catch (error) {\r\n        console.error('[DEBUG] 文件读取失败', error);\r\n        showStatusMessage(`读取文件失败: ${error.message}`, true);\r\n      }\r\n    }\r\n    /**\r\n@function toggleCardCollapse\r\n@description 切换卡片的收起/展开状态\r\n@param {HTMLElement} card 要切换的卡片元素"
    },
    {
      "name": "handleDirectoryClick",
      "type": "函数声明",
      "params": "dirHandle, parentCardId",
      "location": {
        "startLine": 1201,
        "endLine": 1239
      },
      "internalComments": [
        {
          "comment": "// 检查目录是否已经打开",
          "code": "if (await isDirectoryAlreadyOpen(dirHandle)) {",
          "location": {
            "commentLine": 1203,
            "codeLine": 1204
          }
        },
        {
          "comment": "// 已打开目录，滚动到该卡片",
          "code": "card.scrollIntoView({ behavior: 'smooth' });",
          "location": {
            "commentLine": 1209,
            "codeLine": 1210
          }
        },
        {
          "comment": "// 获取父卡片和容器",
          "code": "const parentCard = document.getElementById(parentCardId);",
          "location": {
            "commentLine": 1217,
            "codeLine": 1218
          }
        },
        {
          "comment": "// 创建新的目录卡片",
          "code": "const directoryCard = createDirectoryCard(dirHandle.name, dirHandle, parentCardId, containerID);",
          "location": {
            "commentLine": 1225,
            "codeLine": 1226
          }
        },
        {
          "comment": "// 创建连接线",
          "code": "setTimeout(() => {",
          "location": {
            "commentLine": 1228,
            "codeLine": 1229
          }
        },
        {
          "comment": "// 滚动到新卡片位置",
          "code": "directoryCard.scrollIntoView({ behavior: 'smooth' });",
          "location": {
            "commentLine": 1233,
            "codeLine": 1234
          }
        }
      ]
    },
    {
      "name": "handleFileReadAsText",
      "type": "函数声明",
      "params": "fileHandle",
      "location": {
        "startLine": 1247,
        "endLine": 1282
      },
      "internalComments": [
        {
          "comment": "// 添加当前正在编辑的文件信息",
          "code": "const editorLabel = document.createElement('div');",
          "location": {
            "commentLine": 1257,
            "codeLine": 1258
          }
        },
        {
          "comment": "// 如果已经有标签，则替换它",
          "code": "const existingLabel = document.querySelector('.editor-label');",
          "location": {
            "commentLine": 1261,
            "codeLine": 1262
          }
        },
        {
          "comment": "// 滚动到编辑器位置",
          "code": "fileContentEditor.scrollIntoView({ behavior: 'smooth' });",
          "location": {
            "commentLine": 1270,
            "codeLine": 1271
          }
        },
        {
          "comment": "// 显示状态消息",
          "code": "showStatusMessage(`已加载文件: ${fileHandle.name}`);",
          "location": {
            "commentLine": 1273,
            "codeLine": 1274
          }
        },
        {
          "comment": "// 更新调试面板",
          "code": "updateDebugPanel();",
          "location": {
            "commentLine": 1276,
            "codeLine": 1277
          }
        }
      ]
    },
    {
      "name": "updateConnectors",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 1350,
        "endLine": 1367
      },
      "description": "@function updateConnectors\r\n@description 更新所有连接线位置",
      "internalComments": [
        {
          "comment": "// 移除所有连接线",
          "code": "const connectors = document.querySelectorAll('.card-connector, .connector-node');",
          "location": {
            "commentLine": 1355,
            "codeLine": 1356
          }
        },
        {
          "comment": "// 重新绘制所有连接线",
          "code": "directoryRelationships.forEach((parentId, childId) => {",
          "location": {
            "commentLine": 1359,
            "codeLine": 1360
          }
        }
      ]
    },
    {
      "name": "handleSaveFileChanges",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 1374,
        "endLine": 1390
      }
    },
    {
      "name": "addCollapseAllButton",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 1396,
        "endLine": 1435
      },
      "internalComments": [
        {
          "comment": "// 智能切换所有卡片状态",
          "code": "function toggleAllCards() {",
          "location": {
            "commentLine": 1401,
            "codeLine": 1402
          }
        },
        {
          "comment": "// 检查是否有任何卡片处于展开状态",
          "code": "allCards.forEach(card => {",
          "location": {
            "commentLine": 1406,
            "codeLine": 1407
          }
        },
        {
          "comment": "// 如果有任何卡片展开，则收起所有卡片",
          "code": "if (anyExpanded) {",
          "location": {
            "commentLine": 1413,
            "codeLine": 1414
          }
        },
        {
          "comment": "// 如果所有卡片都已收起，则展开所有卡片",
          "code": "else {",
          "location": {
            "commentLine": 1422,
            "codeLine": 1423
          }
        },
        {
          "comment": "// 添加到控制区域",
          "code": "document.querySelector('.controls').appendChild(collapseAllButton);",
          "location": {
            "commentLine": 1433,
            "codeLine": 1434
          }
        }
      ]
    },
    {
      "name": "toggleAllCards",
      "type": "嵌套函数",
      "params": "",
      "location": {
        "startLine": 1402,
        "endLine": 1431
      },
      "parent": "addCollapseAllButton",
      "internalComments": [
        {
          "comment": "// 检查是否有任何卡片处于展开状态",
          "code": "allCards.forEach(card => {",
          "location": {
            "commentLine": 1406,
            "codeLine": 1407
          }
        },
        {
          "comment": "// 如果有任何卡片展开，则收起所有卡片",
          "code": "if (anyExpanded) {",
          "location": {
            "commentLine": 1413,
            "codeLine": 1414
          }
        },
        {
          "comment": "// 如果所有卡片都已收起，则展开所有卡片",
          "code": "else {",
          "location": {
            "commentLine": 1422,
            "codeLine": 1423
          }
        }
      ]
    },
    {
      "name": "toggleAllCards",
      "type": "函数声明",
      "params": "",
      "location": {
        "startLine": 1402,
        "endLine": 1431
      },
      "internalComments": [
        {
          "comment": "// 检查是否有任何卡片处于展开状态",
          "code": "allCards.forEach(card => {",
          "location": {
            "commentLine": 1406,
            "codeLine": 1407
          }
        },
        {
          "comment": "// 如果有任何卡片展开，则收起所有卡片",
          "code": "if (anyExpanded) {",
          "location": {
            "commentLine": 1413,
            "codeLine": 1414
          }
        },
        {
          "comment": "// 如果所有卡片都已收起，则展开所有卡片",
          "code": "else {",
          "location": {
            "commentLine": 1422,
            "codeLine": 1423
          }
        }
      ]
    }
  ],
  "css": [
    {
      "selector": "body",
      "location": {
        "startLine": 7,
        "endLine": 15
      },
      "properties": "font-family: Arial, sans-serif;\r\n      padding: 0;\r\n      margin: 0;\r\n      background-color: #f5f5f5;\r\n      display: flex;\r\n      min-height: 100vh;",
      "description": "基本样式"
    },
    {
      "selector": ".debug-panel",
      "location": {
        "startLine": 17,
        "endLine": 28
      },
      "properties": "width: 280px;\r\n      background-color: #263238;\r\n      color: #fff;\r\n      padding: 15px;\r\n      box-sizing: border-box;\r\n      overflow-y: auto;\r\n      height: 100vh;\r\n      position: sticky;\r\n      top: 0;",
      "description": "左侧调试面板"
    },
    {
      "selector": ".main-content",
      "location": {
        "startLine": 77,
        "endLine": 84
      },
      "properties": "flex-grow: 1;\r\n      padding: 20px;\r\n      box-sizing: border-box;\r\n      overflow-y: auto;\r\n      height: 100vh;",
      "description": "主内容区域"
    },
    {
      "selector": ".controls",
      "location": {
        "startLine": 86,
        "endLine": 92
      },
      "properties": "margin-bottom: 20px;\r\n      display: flex;\r\n      gap: 10px;\r\n      flex-wrap: wrap;",
      "description": "控制区域"
    },
    {
      "selector": ".board-container",
      "location": {
        "startLine": 112,
        "endLine": 124
      },
      "properties": "position: relative;\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 30px;\r\n      margin-bottom: 20px;\r\n      padding: 20px;\r\n      background-color: #f0f0f0;\r\n      border-radius: 10px;\r\n      border: 1px solid #ddd;\r\n      min-height: 400px;",
      "description": "布局容器 - 电路板风格"
    },
    {
      "selector": ".root-directory-container",
      "location": {
        "startLine": 126,
        "endLine": 132
      },
      "properties": "display: flex;\r\n      flex-direction: column;\r\n      gap: 20px;\r\n      position: relative;",
      "description": "根目录区域"
    },
    {
      "selector": ".directory-card",
      "location": {
        "startLine": 134,
        "endLine": 146
      },
      "properties": "position: relative;\r\n      border: 1px solid #ddd;\r\n      border-radius: 8px;\r\n      overflow: hidden;\r\n      width: 600px;\r\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n      background-color: white;\r\n      margin-left: 30px;\r\n      z-index: 2;\r\n      transition: box-shadow 0.3s, border-radius 0.3s;",
      "description": "目录卡片样式"
    },
    {
      "selector": ".card-content",
      "location": {
        "startLine": 148,
        "endLine": 152
      },
      "properties": "transition: height 0.3s ease-out, opacity 0.3s ease-out;\r\n      overflow: hidden;",
      "description": "卡片内容区域平滑过渡效果"
    },
    {
      "selector": ".directory-card.card-collapsed .card-content",
      "location": {
        "startLine": 154,
        "endLine": 161
      },
      "properties": "height: 0 !important;\r\n      opacity: 0;\r\n      padding: 0;\r\n      margin: 0;\r\n      border: none;",
      "description": "收起状态的卡片内容样式"
    },
    {
      "selector": ".directory-card.card-collapsed .card-header",
      "location": {
        "startLine": 163,
        "endLine": 166
      },
      "properties": "border-bottom: none;",
      "description": "收起状态下标题栏底部边框隐藏"
    },
    {
      "selector": ".directory-card.card-collapsed",
      "location": {
        "startLine": 168,
        "endLine": 173
      },
      "properties": "border-bottom-left-radius: 8px;\r\n      border-bottom-right-radius: 8px;\r\n      box-shadow: 0 1px 3px rgba(0,0,0,0.08);",
      "description": "收起状态的卡片样式"
    },
    {
      "selector": ".directory-card.root",
      "location": {
        "startLine": 175,
        "endLine": 178
      },
      "properties": "margin-left: 0;",
      "description": "根目录卡片"
    },
    {
      "selector": ".card-connector",
      "location": {
        "startLine": 180,
        "endLine": 185
      },
      "properties": "position: absolute;\r\n      border: 2px solid #4285f4;\r\n      z-index: 1;",
      "description": "卡片连接线"
    },
    {
      "selector": ".connector-node",
      "location": {
        "startLine": 197,
        "endLine": 205
      },
      "properties": "position: absolute;\r\n      width: 8px;\r\n      height: 8px;\r\n      background-color: #4285f4;\r\n      border-radius: 50%;\r\n      z-index: 1;",
      "description": "卡片节点点"
    },
    {
      "selector": ".card-actions",
      "location": {
        "startLine": 237,
        "endLine": 241
      },
      "properties": "display: flex;\r\n      gap: 5px;",
      "description": "卡片操作按钮"
    },
    {
      "selector": ".card-content",
      "location": {
        "startLine": 263,
        "endLine": 267
      },
      "properties": "display: flex;\r\n      height: 300px;",
      "description": "分栏布局"
    },
    {
      "selector": ".file-item, .directory-item",
      "location": {
        "startLine": 289,
        "endLine": 296
      },
      "properties": "padding: 10px;\r\n      border-bottom: 1px solid #eee;\r\n      cursor: pointer;\r\n      display: flex;\r\n      align-items: center;",
      "description": "文件项样式"
    },
    {
      "selector": ".selected-item",
      "location": {
        "startLine": 311,
        "endLine": 319
      },
      "properties": "padding: 10px;\r\n      border-bottom: 1px solid #e0e0e0;\r\n      background-color: #E8F5E9;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;",
      "description": "选中项样式"
    },
    {
      "selector": ".editor-container",
      "location": {
        "startLine": 353,
        "endLine": 360
      },
      "properties": "margin-top: 20px;\r\n      background-color: white;\r\n      border-radius: 8px;\r\n      padding: 15px;\r\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);",
      "description": "文件编辑区域"
    },
    {
      "selector": ".status-message",
      "location": {
        "startLine": 378,
        "endLine": 385
      },
      "properties": "padding: 10px;\r\n      margin: 10px 0;\r\n      border-radius: 4px;\r\n      background-color: #e3f2fd;\r\n      color: #0d47a1;",
      "description": "状态消息"
    },
    {
      "selector": ".context-menu",
      "location": {
        "startLine": 387,
        "endLine": 396
      },
      "properties": "position: absolute;\r\n      background-color: white;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\r\n      padding: 5px 0;\r\n      z-index: 1000;",
      "description": "右键菜单"
    },
    {
      "selector": "@media (max-width: 1200px)",
      "location": {
        "startLine": 407,
        "endLine": 411
      },
      "properties": "body {\r\n        flex-direction: column;",
      "description": "响应式设计"
    },
    {
      "selector": "/* 基本样式 */\r\n    body",
      "location": {
        "startLine": 6,
        "endLine": 15
      },
      "properties": "font-family: Arial, sans-serif;\r\n      padding: 0;\r\n      margin: 0;\r\n      background-color: #f5f5f5;\r\n      display: flex;\r\n      min-height: 100vh;"
    },
    {
      "selector": "/* 左侧调试面板 */\r\n    .debug-panel",
      "location": {
        "startLine": 15,
        "endLine": 28
      },
      "properties": "width: 280px;\r\n      background-color: #263238;\r\n      color: #fff;\r\n      padding: 15px;\r\n      box-sizing: border-box;\r\n      overflow-y: auto;\r\n      height: 100vh;\r\n      position: sticky;\r\n      top: 0;"
    },
    {
      "selector": ".debug-panel h2",
      "location": {
        "startLine": 28,
        "endLine": 35
      },
      "properties": "font-size: 18px;\r\n      margin-top: 0;\r\n      padding-bottom: 10px;\r\n      border-bottom: 1px solid #455A64;"
    },
    {
      "selector": ".debug-section",
      "location": {
        "startLine": 35,
        "endLine": 39
      },
      "properties": "margin-bottom: 20px;"
    },
    {
      "selector": ".debug-section h3",
      "location": {
        "startLine": 39,
        "endLine": 49
      },
      "properties": "font-size: 14px;\r\n      color: #81D4FA;\r\n      margin-top: 0;\r\n      margin-bottom: 5px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;"
    },
    {
      "selector": ".debug-content",
      "location": {
        "startLine": 49,
        "endLine": 62
      },
      "properties": "font-family: monospace;\r\n      font-size: 12px;\r\n      white-space: pre-wrap;\r\n      word-break: break-all;\r\n      background-color: #1E272C;\r\n      padding: 10px;\r\n      border-radius: 4px;\r\n      max-height: 200px;\r\n      overflow-y: auto;\r\n      color: #A5D6A7;"
    },
    {
      "selector": ".debug-content.json",
      "location": {
        "startLine": 62,
        "endLine": 66
      },
      "properties": "color: #FFD54F;"
    },
    {
      "selector": ".debug-count",
      "location": {
        "startLine": 66,
        "endLine": 75
      },
      "properties": "background-color: #455A64;\r\n      color: white;\r\n      border-radius: 10px;\r\n      padding: 2px 6px;\r\n      font-size: 11px;\r\n      margin-left: 5px;"
    },
    {
      "selector": "/* 主内容区域 */\r\n    .main-content",
      "location": {
        "startLine": 75,
        "endLine": 84
      },
      "properties": "flex-grow: 1;\r\n      padding: 20px;\r\n      box-sizing: border-box;\r\n      overflow-y: auto;\r\n      height: 100vh;"
    },
    {
      "selector": "/* 控制区域 */\r\n    .controls",
      "location": {
        "startLine": 84,
        "endLine": 92
      },
      "properties": "margin-bottom: 20px;\r\n      display: flex;\r\n      gap: 10px;\r\n      flex-wrap: wrap;"
    },
    {
      "selector": "button",
      "location": {
        "startLine": 92,
        "endLine": 101
      },
      "properties": "padding: 8px 16px;\r\n      background-color: #4CAF50;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 4px;\r\n      cursor: pointer;"
    },
    {
      "selector": "button.danger",
      "location": {
        "startLine": 101,
        "endLine": 105
      },
      "properties": "background-color: #f44336;"
    },
    {
      "selector": "button:disabled",
      "location": {
        "startLine": 105,
        "endLine": 110
      },
      "properties": "background-color: #cccccc;\r\n      cursor: not-allowed;"
    },
    {
      "selector": "/* 布局容器 - 电路板风格 */\r\n    .board-container",
      "location": {
        "startLine": 110,
        "endLine": 124
      },
      "properties": "position: relative;\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 30px;\r\n      margin-bottom: 20px;\r\n      padding: 20px;\r\n      background-color: #f0f0f0;\r\n      border-radius: 10px;\r\n      border: 1px solid #ddd;\r\n      min-height: 400px;"
    },
    {
      "selector": "/* 根目录区域 */\r\n    .root-directory-container",
      "location": {
        "startLine": 124,
        "endLine": 132
      },
      "properties": "display: flex;\r\n      flex-direction: column;\r\n      gap: 20px;\r\n      position: relative;"
    },
    {
      "selector": "/* 目录卡片样式 */\r\n    .directory-card",
      "location": {
        "startLine": 132,
        "endLine": 146
      },
      "properties": "position: relative;\r\n      border: 1px solid #ddd;\r\n      border-radius: 8px;\r\n      overflow: hidden;\r\n      width: 600px;\r\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n      background-color: white;\r\n      margin-left: 30px;\r\n      z-index: 2;\r\n      transition: box-shadow 0.3s, border-radius 0.3s;"
    },
    {
      "selector": "/* 卡片内容区域平滑过渡效果 */\r\n    .card-content",
      "location": {
        "startLine": 146,
        "endLine": 152
      },
      "properties": "transition: height 0.3s ease-out, opacity 0.3s ease-out;\r\n      overflow: hidden;"
    },
    {
      "selector": "/* 收起状态的卡片内容样式 */\r\n    .directory-card.card-collapsed .card-content",
      "location": {
        "startLine": 152,
        "endLine": 161
      },
      "properties": "height: 0 !important;\r\n      opacity: 0;\r\n      padding: 0;\r\n      margin: 0;\r\n      border: none;"
    },
    {
      "selector": "/* 收起状态下标题栏底部边框隐藏 */\r\n    .directory-card.card-collapsed .card-header",
      "location": {
        "startLine": 161,
        "endLine": 166
      },
      "properties": "border-bottom: none;"
    },
    {
      "selector": "/* 收起状态的卡片样式 */\r\n    .directory-card.card-collapsed",
      "location": {
        "startLine": 166,
        "endLine": 173
      },
      "properties": "border-bottom-left-radius: 8px;\r\n      border-bottom-right-radius: 8px;\r\n      box-shadow: 0 1px 3px rgba(0,0,0,0.08);"
    },
    {
      "selector": "/* 根目录卡片 */\r\n    .directory-card.root",
      "location": {
        "startLine": 173,
        "endLine": 178
      },
      "properties": "margin-left: 0;"
    },
    {
      "selector": "/* 卡片连接线 */\r\n    .card-connector",
      "location": {
        "startLine": 178,
        "endLine": 185
      },
      "properties": "position: absolute;\r\n      border: 2px solid #4285f4;\r\n      z-index: 1;"
    },
    {
      "selector": ".connector-horizontal",
      "location": {
        "startLine": 185,
        "endLine": 190
      },
      "properties": "height: 2px;\r\n      background-color: #4285f4;"
    },
    {
      "selector": ".connector-vertical",
      "location": {
        "startLine": 190,
        "endLine": 195
      },
      "properties": "width: 2px;\r\n      background-color: #4285f4;"
    },
    {
      "selector": "/* 卡片节点点 */\r\n    .connector-node",
      "location": {
        "startLine": 195,
        "endLine": 205
      },
      "properties": "position: absolute;\r\n      width: 8px;\r\n      height: 8px;\r\n      background-color: #4285f4;\r\n      border-radius: 50%;\r\n      z-index: 1;"
    },
    {
      "selector": ".card-header",
      "location": {
        "startLine": 205,
        "endLine": 215
      },
      "properties": "background-color: #4285f4;\r\n      padding: 12px;\r\n      border-bottom: 1px solid #ddd;\r\n      color: white;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;"
    },
    {
      "selector": ".root .card-header",
      "location": {
        "startLine": 215,
        "endLine": 219
      },
      "properties": "background-color: #FF5722;"
    },
    {
      "selector": ".card-title-section",
      "location": {
        "startLine": 219,
        "endLine": 223
      },
      "properties": "flex-grow: 1;"
    },
    {
      "selector": ".card-title",
      "location": {
        "startLine": 223,
        "endLine": 229
      },
      "properties": "margin: 0;\r\n      font-size: 16px;\r\n      font-weight: bold;"
    },
    {
      "selector": ".card-info",
      "location": {
        "startLine": 229,
        "endLine": 235
      },
      "properties": "font-size: 12px;\r\n      margin-top: 5px;\r\n      color: rgba(255, 255, 255, 0.8);"
    },
    {
      "selector": "/* 卡片操作按钮 */\r\n    .card-actions",
      "location": {
        "startLine": 235,
        "endLine": 241
      },
      "properties": "display: flex;\r\n      gap: 5px;"
    },
    {
      "selector": ".card-collapse-btn, .card-close-btn",
      "location": {
        "startLine": 241,
        "endLine": 257
      },
      "properties": "background-color: transparent;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 50%;\r\n      width: 24px;\r\n      height: 24px;\r\n      font-weight: bold;\r\n      cursor: pointer;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin: 0;\r\n      padding: 0;"
    },
    {
      "selector": ".card-collapse-btn:hover, .card-close-btn:hover",
      "location": {
        "startLine": 257,
        "endLine": 261
      },
      "properties": "background-color: rgba(255, 255, 255, 0.2);"
    },
    {
      "selector": "/* 分栏布局 */\r\n    .card-content",
      "location": {
        "startLine": 261,
        "endLine": 267
      },
      "properties": "display: flex;\r\n      height: 300px;"
    },
    {
      "selector": ".content-left",
      "location": {
        "startLine": 267,
        "endLine": 273
      },
      "properties": "flex: 1;\r\n      border-right: 1px solid #eee;\r\n      overflow-y: auto;"
    },
    {
      "selector": ".content-right",
      "location": {
        "startLine": 273,
        "endLine": 279
      },
      "properties": "flex: 1;\r\n      overflow-y: auto;\r\n      background-color: #f9f9f9;"
    },
    {
      "selector": ".content-right-header",
      "location": {
        "startLine": 279,
        "endLine": 287
      },
      "properties": "padding: 10px;\r\n      background-color: #E3F2FD;\r\n      border-bottom: 1px solid #ddd;\r\n      font-weight: bold;\r\n      color: #0D47A1;"
    },
    {
      "selector": "/* 文件项样式 */\r\n    .file-item, .directory-item",
      "location": {
        "startLine": 287,
        "endLine": 296
      },
      "properties": "padding: 10px;\r\n      border-bottom: 1px solid #eee;\r\n      cursor: pointer;\r\n      display: flex;\r\n      align-items: center;"
    },
    {
      "selector": ".file-item:hover, .directory-item:hover",
      "location": {
        "startLine": 296,
        "endLine": 300
      },
      "properties": "background-color: #f0f0f0;"
    },
    {
      "selector": ".directory-item",
      "location": {
        "startLine": 300,
        "endLine": 304
      },
      "properties": "color: #4285f4;"
    },
    {
      "selector": ".item-icon",
      "location": {
        "startLine": 304,
        "endLine": 309
      },
      "properties": "margin-right: 8px;\r\n      font-size: 16px;"
    },
    {
      "selector": "/* 选中项样式 */\r\n    .selected-item",
      "location": {
        "startLine": 309,
        "endLine": 319
      },
      "properties": "padding: 10px;\r\n      border-bottom: 1px solid #e0e0e0;\r\n      background-color: #E8F5E9;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;"
    },
    {
      "selector": ".selected-item .item-name",
      "location": {
        "startLine": 319,
        "endLine": 324
      },
      "properties": "display: flex;\r\n      align-items: center;"
    },
    {
      "selector": ".remove-item",
      "location": {
        "startLine": 324,
        "endLine": 340
      },
      "properties": "background-color: transparent;\r\n      color: #f44336;\r\n      border: none;\r\n      cursor: pointer;\r\n      padding: 0;\r\n      font-size: 16px;\r\n      font-weight: bold;\r\n      width: 24px;\r\n      height: 24px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      border-radius: 50%;"
    },
    {
      "selector": ".remove-item:hover",
      "location": {
        "startLine": 340,
        "endLine": 344
      },
      "properties": "background-color: rgba(244, 67, 54, 0.1);"
    },
    {
      "selector": ".empty-selection",
      "location": {
        "startLine": 344,
        "endLine": 351
      },
      "properties": "padding: 20px;\r\n      color: #757575;\r\n      text-align: center;\r\n      font-style: italic;"
    },
    {
      "selector": "/* 文件编辑区域 */\r\n    .editor-container",
      "location": {
        "startLine": 351,
        "endLine": 360
      },
      "properties": "margin-top: 20px;\r\n      background-color: white;\r\n      border-radius: 8px;\r\n      padding: 15px;\r\n      box-shadow: 0 2px 5px rgba(0,0,0,0.1);"
    },
    {
      "selector": ".editor-label",
      "location": {
        "startLine": 360,
        "endLine": 366
      },
      "properties": "margin-bottom: 10px;\r\n      font-weight: bold;\r\n      color: #4285f4;"
    },
    {
      "selector": "textarea",
      "location": {
        "startLine": 366,
        "endLine": 376
      },
      "properties": "width: 100%;\r\n      height: 300px;\r\n      padding: 10px;\r\n      box-sizing: border-box;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      font-family: monospace;"
    },
    {
      "selector": "/* 状态消息 */\r\n    .status-message",
      "location": {
        "startLine": 376,
        "endLine": 385
      },
      "properties": "padding: 10px;\r\n      margin: 10px 0;\r\n      border-radius: 4px;\r\n      background-color: #e3f2fd;\r\n      color: #0d47a1;"
    },
    {
      "selector": "/* 右键菜单 */\r\n    .context-menu",
      "location": {
        "startLine": 385,
        "endLine": 396
      },
      "properties": "position: absolute;\r\n      background-color: white;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\r\n      padding: 5px 0;\r\n      z-index: 1000;"
    },
    {
      "selector": ".context-menu-item",
      "location": {
        "startLine": 396,
        "endLine": 401
      },
      "properties": "padding: 8px 12px;\r\n      cursor: pointer;"
    },
    {
      "selector": ".context-menu-item:hover",
      "location": {
        "startLine": 401,
        "endLine": 405
      },
      "properties": "background-color: #f0f0f0;"
    },
    {
      "selector": "/* 响应式设计 */\r\n    @media (max-width: 1200px)",
      "location": {
        "startLine": 405,
        "endLine": 411
      },
      "properties": "body {\r\n        flex-direction: column;"
    }
  ],
  "html": [
    {
      "tag": "div",
      "location": {
        "startLine": 427,
        "endLine": 427
      },
      "class": "debug-panel",
      "description": "左侧调试面板"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 430,
        "endLine": 430
      },
      "class": "debug-section"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 431,
        "endLine": 431
      },
      "id": "openedDirCount"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 432,
        "endLine": 432
      },
      "id": "openedDirectoriesDebug"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 435,
        "endLine": 435
      },
      "class": "debug-section"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 436,
        "endLine": 436
      },
      "id": "relationshipsCount"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 437,
        "endLine": 437
      },
      "id": "relationshipsDebug"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 440,
        "endLine": 440
      },
      "class": "debug-section"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 441,
        "endLine": 441
      },
      "id": "rootDirCount"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 442,
        "endLine": 442
      },
      "id": "rootDirectoriesDebug"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 445,
        "endLine": 445
      },
      "class": "debug-section"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 446,
        "endLine": 446
      },
      "id": "selectedItemsCount"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 447,
        "endLine": 447
      },
      "id": "selectedItemsDebug"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 450,
        "endLine": 450
      },
      "class": "debug-section"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 451,
        "endLine": 451
      },
      "id": "dirHandleMapCount"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 452,
        "endLine": 452
      },
      "id": "dirHandleMapDebug"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 455,
        "endLine": 455
      },
      "class": "debug-section"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 457,
        "endLine": 457
      },
      "id": "globalVarsDebug"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 462,
        "endLine": 462
      },
      "class": "main-content",
      "description": "主内容区域"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 463,
        "endLine": 463
      },
      "class": "controls"
    },
    {
      "tag": "button",
      "location": {
        "startLine": 464,
        "endLine": 464
      },
      "id": "addDirectoryButton"
    },
    {
      "tag": "button",
      "location": {
        "startLine": 465,
        "endLine": 465
      },
      "class": "danger"
    },
    {
      "tag": "button",
      "location": {
        "startLine": 466,
        "endLine": 466
      },
      "id": "saveChangesButton"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 469,
        "endLine": 469
      },
      "class": "board-container"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 473,
        "endLine": 473
      },
      "class": "editor-container"
    },
    {
      "tag": "textarea",
      "location": {
        "startLine": 474,
        "endLine": 474
      },
      "id": "fileContentEditor"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 984,
        "endLine": 984
      },
      "class": "item-name"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 984,
        "endLine": 984
      },
      "class": "item-icon"
    },
    {
      "tag": "button",
      "location": {
        "startLine": 985,
        "endLine": 985
      },
      "class": "remove-item"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 1022,
        "endLine": 1022
      },
      "class": "item-icon"
    },
    {
      "tag": "span",
      "location": {
        "startLine": 1035,
        "endLine": 1035
      },
      "class": "item-icon"
    },
    {
      "tag": "div",
      "location": {
        "startLine": 1053,
        "endLine": 1053
      },
      "class": "error"
    }
  ]
}